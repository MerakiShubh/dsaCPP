// A. Warm-up (filters, sorting)

Q1. List all products with price between 700 and 2000, sorted by price desc.

Ans. select * from products where price between 700 and 2000 order by price desc;

Q2. Get distinct cities from which orders have been shipped (use orders.shipping_address_id → addresses.city).

Ans. select a.city, o.status from addresses as a join orders as o on a.address_id = o.order_id where o.status = "shipped";

Q3. Show all customers whose first name starts with D.

Ans. select * from customers where first_name like "D%";

Q4. Count how many products are active;

Ans. select active, count("active") as active_count from products where active
 = 1;
 
Q5. Find products with zero or low stock(<=10) from inventroy.

Ans. select p.name, i.quantity from products as p join inventory as i on p.product_id = i.product_id where i.quantity <= 10;

// B. Aggregations & GROUP BY

Q6. For each category, show total number of products.

Ans. 
//only count of prouct
select c.name as category_name, count(p.product_id) as product_count from categories as c join products as p on c.category_id = p.category_id group by c.name;


//count with product name 
select c.name as category_name, count(p.product_id) as product_count, group_concat(p.name order by p.name SEPARATOR ', ') as product_name from categoriesns
 as c join products as p on c.category_id = p.category_id group by c.name;
 
Q7. For each category, show avg product price and round to 2 decimals.

Ans. select c.name as category_name, round(avg(p.price),2) as avg_price from categories as c join products as p on c.category_id = p.category_id group by c.name;

Q8. Total revenue collected per payment method (sum of payments.amount).

Ans.  select p.method, sum(p.amount) from payments group by method;

Q9. For each order, compute its total (sum of quantity * unit_price from order_items).

Ans. select order_id, sum(quantity * unit_price) from order_items group by order_id;

Q10. For each customer, how many orders have status DELIVERED?

//Remember -> select ke baad jo jo attribute hoga sirf us pr group by aur having lagega
Ans. select customer_id, count(order_id) from orders where status = "DELIVERED" group by customer_id;

// C. Joins (inner/left)

Q11. Show each order with the customer’s full name and order status.

//concat to combine to two columns of same table
Ans. select o.status, o.order_id, concat(c.first_name, " ", c.last_name) as fullname from orders as o left join customers as c on o.customer_id = c.customer_id;

Q12. List order items with product name, quantity and line total (quantity*unit_price).

Ans.  select o.order_id, o.product_id, p.name, (o.quantity*o.unit_price) as total from order_items as o left join products as p on o.product_id = p.product_id;

Q13. Show all orders and (if present) the shipper name and tracking number.

Ans. select o.order_id, s.tracking_number, sh.name as shipper_name from orders as o left join
shipments as s on o.order_id = s.order_id left join shippers as sh on s.shipper_id = sh.shipper_id;

Q14. Find products that have never been ordered (LEFT JOIN + IS NULL).

Ans. select p.product_id, p.name  from products as p left join order_items as o on o.product_id = p.product_id where o.order_id is null;

Q15. Show each review with product name and reviewer’s full name.

Ans. select r.review_id, r.review_text, concat( c.first_name, ' ', c.last_name) as reviewer_name, p.name as product_name from reviews as r left join customers as c on r.customer_id = c.customer_id left join products as p on r.product_id = p.product_id;


//D. Multi-table joins & real metrics

Q16. For each customer, show total amount they paid across all orders (join orders→payments).

Ans. select c.customer_id, concat(c.first_name, ' ', c.last_name) as customer_name, sum(p.amount) as total_amount from payments as p join orders as o on p.order_id = o.order_id join customers as c on c.customer_id = o.customer_id group by c.customer_id, customer_name;

Q17. Which category has the highest total sales amount?

Ans. 
